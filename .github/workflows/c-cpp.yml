name: C/C++ CI

on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:    
      - main
      - 'mona/octocat'
      - 'releases/**'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v3

    - name: Install cross compile toolchain
      run: sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf libspdlog-dev libpcap-dev protobuf-compiler

    - name: Install dependencies
      run: sudp apt-get install libev-dev libevdev2 libgmock-dev

    - name: dump arm gcc version
      run: arm-linux-gnueabihf-gcc -v
      working-directory: ./src/raspberrypi
 
    - name: dump native gcc version
      run: gcc -v
      working-directory: ./src/raspberrypi
 
    - name: make standard
      run: make all -j CONNECT_TYPE=STANDARD CROSS_COMPILE=arm-linux-gnueabihf-
      working-directory: ./src/raspberrypi
 
    - name: Fullspec Build
      run: make all -j CONNECT_TYPE=FULLSPEC CROSS_COMPILE=arm-linux-gnueabihf-
      working-directory: ./src/raspberrypi

    - name: Clean for testing
      run: make clean -j CONNECT_TYPE=FULLSPEC
      working-directory: ./src/raspberrypi

    - name: Functional Test
      run: make test -j CONNECT_TYPE=FULLSPEC
      working-directory: ./src/raspberrypi      

    - name: Clean for coverage
      run: make clean -j CONNECT_TYPE=FULLSPEC
      working-directory: ./src/raspberrypi

    - name: Coverage Test
      run: make coverage -j CONNECT_TYPE=FULLSPEC
      working-directory: ./src/raspberrypi


    # # We need to tar the binary outputs to retain the executable
    # # file permission. Currently, actions/upload-artifact only
    # # supports .ZIP files.
    # # This is workaround for https://github.com/actions/upload-artifact/issues/38
    # - name: tar binary outputs
    #   run: tar -czvf rascsi.tar.gz ./bin
    #   working-directory: ./src/raspberrypi

    # - name: upload artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: arm-binaries
    #     path: ./src/raspberrypi/rascsi.tar.gz

#  buildroot-image:
#    runs-on: ubuntu-latest
#    steps:
#      - name: git-fetch buildroot
#        run: git clone git://git.busybox.net/buildroot
#      - name: make defconfig
#        run: make raspberrypi4_defconfig
#        working-directory: ./buildroot
#      - name: make
#        run: make all
#        working-directory: ./buildroot
